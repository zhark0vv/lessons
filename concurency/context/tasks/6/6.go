package main

import "fmt"

func main() {
	fmt.Printf("result: %d\n", test())
}

func test() (x int) {
	defer func() {
		fmt.Printf("x as parameter: %d\n", x)
		x += 10
		fmt.Printf("x after return: %d\n", x)
	}()

	x = 7
	return 9
}

// В функции main вызывается функция test, результат которой выводится на экран.
// В функции test переменная x является именованным возвращаемым значением. В самом начале ее значение равно 0.
// Затем используется defer для вызова анонимной функции перед завершением работы test.
// В этот момент значение x равно 0, так как defer сохраняет текущее значение переменных для передачи в отложенную функцию.
// Затем переменной x присваивается значение 7.
// Вызов return в test устанавливает значение возвращаемого результата в 9, но перед завершением работы вызывается отложенная функция.
// В ней x, переданный в качестве параметра (n), имеет значение 0 (значение переменной на момент вызова defer),
// что выводится на экран. Затем x (который является именованным возвращаемым значением) увеличивается на 10,
// и его новое значение (уже равное 19, так как return уже установил его в 9) выводится на экран.
//В итоге возвращаемое значение функции test будет равно 19.
